#!/usr/bin/env python

# Copyright Claes Holmerson 2009
# This program can be distributed under the terms of the GNU GPL v2.

import os, re, subprocess

ufraw_settings = { \
    "shrink": "4", \
        "wb": "camera", \
        "saturation": "1.0", \
        "restore": "lch", \
        "exposure": "0", \
        "black-point": "0", \
        "clip": "digital", \
        "interpolation": "ahd", \
        "wavelet-denoising-threshold": "20", \
        "out-type": "tiff16" \
        }

enfuse_settings = { \
    "enfuse_exposures": ["0"], \
        "wExposure": "1.0", \
        "wSaturation": "0.2", \
        "wContrast": "0", \
        "wMu": "0.5", \
        "wSigma": "0.2", \
        }

greycstoration_settings = { \
    "dt": "75", \
        "p": "0.8", \
        "a": "0.25", \
        "alpha": "1.5", \
        "sigma": "1.5", \
        "fast": "true", \
        "iter": "1", \
        "cbase": "1", \
        "crange": "1,2"
    }

global_settings = {}
global_settings.update(enfuse_settings)
global_settings.update(ufraw_settings)
global_settings.update(greycstoration_settings)

class ImageOperation:
    
    def __init__(self, settings):
        self.children = []
        self.local_settings = settings
        #Override global settings with local settings
        self.settings = global_settings.copy()
        self.settings.update(self.local_settings)

    def get_output_filename(self, suffix, extension):
        return self.name + " " +  suffix + " " + str(self.local_settings) + extension

    def perform_operation(self, image):
        print self.name, self.local_settings
        self.operation(image)
        if len(self.children) > 0:
            for child in self.children: 
                child.perform_operation(image)
        else:
            image.create_TIFF(self)

    def add_child(self, child):
        self.children.append(child)

    def get_input(self, image):
        if "channel" in self.settings:
            channel_name = self.settings["channel"]
        else:
            channel_name = "TIFF"

        input = image.get_channel(self, channel_name)
        return input
        
    def set_output(self, image, output):
        if "channel" in self.settings:
            channel_name = self.settings["channel"]
        else:
            channel_name = "TIFF"
        image.set_channel(channel_name, output)



class Image: 

    def __init__(self, channels):
        self.channels = channels

    def get_default(self):
        #TODO
        return channel["TIFF"]

    def set_channel(self, channel_name, channel):
        self.channels[channel_name] = channel

    def get_channel(self, imageop, channel_name):
        if channel_name == "L" or channel_name == "A" or channel_name == "B":
            if not self.is_LAB():
                self.transform_LAB(imageop)
            return self.channels[channel_name]
        elif channel_name == "TIFF":
            if not self.is_TIFF():
                self.transform_TIFF(imageop)
            return self.channels["TIFF"] 
        elif channel_name == "RAW":
            if self.is_RAW():
                return self.channels["RAW"] 
        raise Exception("Could not retrieve channel " + channel_name)

    def is_LAB(self):
        return "L" in self.channels and "A" in self.channels and "B" in self.channels

    def is_TIFF(self):
        return "TIFF" in self.channels

    def is_RAW(self):
        return "RAW" in self.channels

    def get_RAW(self):
        return self.channels["RAW"]

    def get_TIFF(self):
        return self.channels["TIFF"]

    def transform_TIFF(self, imageop):
        self.channels = self.create_TIFF(imageop)

    def create_TIFF(self, imageop):
        if not self.is_TIFF():

            l_channel = self.channels["L"]
            a_channel = self.channels["A"]
            b_channel = self.channels["B"]

            outputfile = imageop.get_output_filename("", ".tiff")

            lab_to_rgb_cmd = [
                "convert", \
                    l_channel, \
                    "-colorspace", "LAB", \
                    l_channel, "-compose", "CopyRed", "-composite",  \
                    a_channel, "-compose", "CopyGreen", "-composite", \
                    b_channel, "-compose", "CopyBlue", "-composite", \
                    "-colorspace", "RGB", \
                    outputfile
                ]        
            subprocess.call(lab_to_rgb_cmd, 0, None, None, None, None)         
            return {"TIFF": outputfile}        

    def transform_LAB(self, imageop):

        if not self.is_LAB():

            inputfile = self.channels["TIFF"]

            l_channel = imageop.get_output_filename("L", ".tiff")
            a_channel = imageop.get_output_filename("A", ".tiff")
            b_channel = imageop.get_output_filename("B", ".tiff")
            
            #Convert to LAB colorspace
            rgb_to_lab_L_cmd = [
                "convert", \
                    inputfile, \
                    "-colorspace", "LAB", \
                    "-channel", "R", \
                    "-separate", \
                    l_channel
                ]
            rgb_to_lab_A_cmd = [
                "convert", \
                    inputfile, \
                    "-colorspace", "LAB", \
                    "-channel", "G", \
                    "-separate", \
                    a_channel
            ]
            rgb_to_lab_B_cmd = [
                "convert", \
                    inputfile, \
                    "-colorspace", "LAB", \
                    "-channel", "B", \
                    "-separate", \
                    b_channel
                ]            
            subprocess.call(rgb_to_lab_L_cmd, 0, None, None, None, None)
            subprocess.call(rgb_to_lab_A_cmd, 0, None, None, None, None)
            subprocess.call(rgb_to_lab_B_cmd, 0, None, None, None, None)
            
            self.channels = {"L": l_channel, "A": a_channel, "B": b_channel}



class Unsharp_mask_operation(ImageOperation):

    def __init__(self, settings):
        ImageOperation.__init__(self, settings)
        self.name = "Unsharp mask"

    def operation(self, image):

        inputfile = self.get_input(image)

        outputfile = self.get_output_filename("", ".tiff")

        if "unsharp" in self.settings:
            unsharp = self.settings["unsharp"]
        else:
            unsharp = "1.5x1.2+1.0+0.10"

        unsharp_mask_cmd = [
            "convert", \
                inputfile, \
            "-unsharp", unsharp, \
                outputfile
            ]        
        subprocess.call(unsharp_mask_cmd, 0, None, None, None, None)

        self.set_output(image, outputfile)


class Boost_color_operation(ImageOperation):

    def __init__(self, settings):
        ImageOperation.__init__(self, settings)
        self.name = "Boost color"

    def operation(self, image):

        a_channel = image.get_channel(self, "A")
        b_channel = image.get_channel(self, "B")

        a_boosted = self.get_output_filename("A:boosted", ".tiff")
        b_boosted = self.get_output_filename("B:boosted", ".tiff")

        #Boost uses sigmoidal contrast format: "XxY%", where X=contrast factor, Y=center of sigmoid 

        if "a_boost" in self.settings: 
            a_boost = self.settings["a_boost"]
            boost_A_cmd = [
                "convert", \
                    a_channel, \
                    "-sigmoidal-contrast", a_boost, \
                    a_boosted
                ]
            subprocess.call(boost_A_cmd, 0, None, None, None, None)
        else:
            a_boosted = a_channel

        if "b_boost" in self.settings:
            b_boost = self.settings["b_boost"]
            boost_B_cmd = [
                "convert", \
                    b_channel, \
                    "-sigmoidal-contrast", b_boost, \
                    b_boosted
                ]
            subprocess.call(boost_B_cmd, 0, None, None, None, None)
        else:
            b_boosted = b_channel

        image.set_channel("A", a_boosted)
        image.set_channel("B", b_boosted)


class Reduce_noise_operation(ImageOperation):

    def __init__(self, settings):
        ImageOperation.__init__(self, settings)
        self.name = "Reduce noise with greycstoration"

    def operation(self, image):
        
        inputfile =  self.get_input(image)
        outputfile = self.get_output_filename("", ".tiff")
        
        greycstoration_cmd = [
            "greycstoration", \
                "-restore", inputfile, \
                "-o", outputfile, \
                "-dt", self.settings["dt"], \
                "-p", self.settings["p"], \
                "-a", self.settings["a"], \
                "-alpha", self.settings["alpha"], \
                "-sigma", self.settings["sigma"], \
                "-fast", self.settings["fast"], \
                "-iter", self.settings["iter"], \
                "-visu", "0", \
                "-cbase", self.settings["cbase"], \
                "-crange", self.settings["crange"]
            ]
        
        retval = subprocess.call(greycstoration_cmd, 0, None, None, None, None)
        self.set_output(image, outputfile)

class Enfuse_from_raw_operation(ImageOperation):

    def __init__(self, settings):
        ImageOperation.__init__(self, settings)
        self.name = "Develop from raw, enfuse"
        
    def operation(self, image):

        inputfile = image.get_channel(self, "RAW")

        exposure_list = self.settings["enfuse_exposures"]
        developedfiles = []
        
        for exposure in exposure_list:
            
            outputfile = self.get_output_filename(exposure, ".tiff")
            ufraw_cmd = ["ufraw-batch", \
                             "--shrink", self.settings["shrink"], \
                             "--wb", self.settings["wb"], \
                             "--saturation", self.settings["saturation"], \
                             "--restore", self.settings["restore"], \
                             "--exposure", exposure, \
                             "--black-point", self.settings["black-point"], \
                             "--clip", self.settings["clip"], \
                             "--interpolation", self.settings["interpolation"], \
                             "--wavelet-denoising-threshold", self.settings["wavelet-denoising-threshold"], \
                             #"--overwrite", settings["overwrite"], \
                             "--out-type", self.settings["out-type"], \
                             "--output", outputfile, \
                             inputfile]
            
            retval = subprocess.call(ufraw_cmd, 0, None, None, None, None)
            developedfiles.append(outputfile)
            
        outputfile = self.get_output_filename("out", ".tiff")
            
        enfuse_cmd1 = ["enfuse", \
                           "-o", outputfile, \
                           "--wExposure", self.settings["wExposure"], \
                           "--wSaturation", self.settings["wSaturation"], \
                           "--wContrast", self.settings["wContrast"], \
                           "--wMu", self.settings["wMu"], \
                           "--wSigma", self.settings["wSigma"]]
        
        enfuse_cmd1.extend(developedfiles)
        
        retval = subprocess.call(enfuse_cmd1, 0, None, None, None, None)

        image.set_channel("TIFF", outputfile)
            

class CA_correct_operation(ImageOperation):

    def __init__(self, settings):
        ImageOperation.__init__(self, settings)
        self.name = "Correct chromatic aberration"

    def operation(self, image):
        
        inputfile =  self.get_input(image)        
        tca_correct_cmd = ["tca_correct", \
                               "-o", "abcv", \
                               inputfile]
        
        tca_correct_proc = subprocess.Popen(tca_correct_cmd, stdout = subprocess.PIPE)
        tca_correct_result = tca_correct_proc.communicate()[0]
        ca_params = re.findall( "-r (.*) -b (.*)", tca_correct_result )
        
        outputfile = self.get_output_filename("", ".tiff")
        
        fulla_cmd = ["fulla", \
                         "-r", ca_params[0][0], \
                         "-b", ca_params[0][1], \
                         "-o", outputfile, \
                         inputfile]
    
        retval = subprocess.call(fulla_cmd, 0, None, None, None, None)
        self.set_output(image, outputfile)
        
        
def main():    

    enfuse_from_raw = Enfuse_from_raw_operation({"enfuse_exposures": [ "-2", "-1", "0", "1", "2"]})

    unsharp = Unsharp_mask_operation({"channel": "L" })
    enfuse_from_raw.add_child(unsharp)

    unsharp.add_child(Boost_color_operation({"a_boost": "1.5x60%", "b_boost" : "1.5x60%"}))
    unsharp.add_child(Boost_color_operation({"a_boost": "1.5x40%", "b_boost" : "1.5x40%"}))
    unsharp.add_child(Boost_color_operation({"a_boost": "1.5x60%", "b_boost" : "1.5x40%"}))
    unsharp.add_child(Boost_color_operation({"a_boost": "1.5x40%", "b_boost" : "1.5x60%"}))
    enfuse_from_raw.add_child(Boost_color_operation({"a_boost": "1.5x60%"}))
    enfuse_from_raw.add_child(Boost_color_operation({"a_boost": "1.5x40%"}))
    enfuse_from_raw.add_child(Boost_color_operation({"b_boost" : "1.5x40%"}))
    enfuse_from_raw.add_child(Boost_color_operation({"b_boost" : "1.5x60%"}))

    image = Image({"RAW": "inputfile.cr2"});

    enfuse_from_raw.perform_operation(image)

main()
