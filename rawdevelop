#!/usr/bin/env python

import os, re, subprocess

enfuse_settings = { \
    "wExposure": "1.0", \
        "wSaturation": "0.2", \
        "wContrast": "0", \
        "wMu": "0.5", \
        "wSigma": "0.2", \
        }

ufraw_settings = { \
    "shrink": "2", \
        "wb": "camera", \
        "saturation": "1.0", \
        "restore": "lch", \
        "exposure": "0", \
        "black-point": "0", \
        "clip": "digital", \
        "interpolation": "ahd", \
        "wavelet-denoising-threshold": "20", \
        "out-type": "tiff16" \
        }

greycstoration_settings = { \
    "dt": "75", \
        "p": "0.8", \
        "a": "0.25", \
        "alpha": "1.5", \
        "sigma": "1.5", \
        "fast": "true", \
        "iter": "1", \
        "cbase": "1", \
        "crange": "1,2"
    }

global_settings = {}
global_settings.update(enfuse_settings)
global_settings.update(ufraw_settings)
global_settings.update(greycstoration_settings)

class ImageOperation:
    
    def __init__(self, settings):
        self.children = []
        self.local_settings = settings
        #Override global settings with local settings
        self.settings = global_settings.copy()
        self.settings.update(self.local_settings)

    def get_output_filename(self, suffix, extension):
        return self.name + " " +  suffix + " " + str(self.local_settings) + extension

    def perform_operation(self, image):
        self.operation(image)
        for child in self.children: 
            child.perform_operation(image)
            

class Image: 

    def __init__(self):
        self.files = {}
        self.depth = 0

    def get_file(self, name):
        return self.files[name]
        
    def set_file(self, name, file):
        self.files[name] = file

class BoostColorOperation(ImageOperation):

    def __init__(self, settings):
        ImageOperation.__init__(self, settings)
        self.name = "Boost color"

    def operation(self, image):
        inputfile = image.get_file("current")
        outputfile = self.get_output_filename("boosted", ".tiff")
        a_boosted = self.get_output_filename("A-boosted", ".tiff")
        b_boosted = self.get_output_filename("B-boosted", ".tiff")

        #Sigmoidal contrast format: "XxY%", where X=contrast factor, Y=center of sigmoid 
        a_boost = self.settings["a_boost"]
        b_boost = self.settings["b_boost"]

        print a_boost, b_boost

        #Convert to LAB colorspace
        rgb_to_lab_L_cmd = [
            "convert", \
                inputfile, \
                "-colorspace", "LAB", \
                "-channel", "R", \
                "-separate", \
                "L.tiff"
            ]
        rgb_to_lab_A_cmd = [
            "convert", \
                inputfile, \
               "-colorspace", "LAB", \
                "-channel", "G", \
                "-separate", \
                "A.tiff"
            ]
        rgb_to_lab_B_cmd = [
            "convert", \
                inputfile, \
                "-colorspace", "LAB", \
                "-channel", "B", \
                "-separate", \
                "B.tiff"
            ]
        
        boost_A_cmd = [
            "convert", \
                "A.tiff", \
                "-sigmoidal-contrast", a_boost, \
                a_boosted
            ]
        boost_B_cmd = [
            "convert", \
                "B.tiff", \
                "-sigmoidal-contrast", b_boost, \
                b_boosted
            ]
        
        lab_to_rgb_cmd = [
            "convert", \
                "L.tiff", \
                "-colorspace", "LAB", \
                "L.tiff", "-compose", "CopyRed", "-composite",  \
                a_boosted, "-compose", "CopyGreen", "-composite", \
                b_boosted, "-compose", "CopyBlue", "-composite", \
                "-colorspace", "RGB", \
                outputfile
            ]
        
        subprocess.call(rgb_to_lab_L_cmd, 0, None, None, None, None)
        subprocess.call(rgb_to_lab_A_cmd, 0, None, None, None, None)
        subprocess.call(rgb_to_lab_B_cmd, 0, None, None, None, None)
        subprocess.call(boost_A_cmd, 0, None, None, None, None)
        subprocess.call(boost_B_cmd, 0, None, None, None, None)
        subprocess.call(lab_to_rgb_cmd, 0, None, None, None, None)                    

class ReduceNoiseOperation(ImageOperation):

    def __init__(self, settings):
        ImageOperation.__init__(self, settings)
        self.name = "Reduce noise with greycstoration"

    def operation(self, image):
        
        inputfile = image.get_file("current")
        outputfile = self.get_output_filename("", ".tiff")
        
        greycstoration_cmd = [
            "greycstoration", \
                "-restore", inputfile, \
                "-o", outputfile, \
                "-dt", self.settings["dt"], \
                "-p", self.settings["p"], \
                "-a", self.settings["a"], \
                "-alpha", self.settings["alpha"], \
                "-sigma", self.settings["sigma"], \
                "-fast", self.settings["fast"], \
                "-iter", self.settings["iter"], \
                "-visu", "0", \
                "-cbase", self.settings["cbase"], \
                "-crange", self.settings["crange"]
            ]
        
        retval = subprocess.call(greycstoration_cmd, 0, None, None, None, None)
        image.set_file("current", outputfile)



class EnfuseFromRawOperation(ImageOperation):

    def __init__(self, settings):
        ImageOperation.__init__(self, settings)
        self.name = "Develop from raw, enfuse"
        
    def operation(self, image):
        inputfile = image.get_file("raw")
        
        exposure_list = self.settings["enfuse_exposures"]
        developedfiles = []
        
        for exposure in exposure_list:
            
            outputfile = self.get_output_filename(exposure, ".tiff")
            ufraw_cmd = ["ufraw-batch", \
                             "--shrink", self.settings["shrink"], \
                             "--wb", self.settings["wb"], \
                             "--saturation", self.settings["saturation"], \
                             "--restore", self.settings["restore"], \
                             "--exposure", exposure, \
                             "--black-point", self.settings["black-point"], \
                             "--clip", self.settings["clip"], \
                             "--interpolation", self.settings["interpolation"], \
                             "--wavelet-denoising-threshold", self.settings["wavelet-denoising-threshold"], \
                             #"--overwrite", settings["overwrite"], \
                             "--out-type", self.settings["out-type"], \
                             "--output", outputfile, \
                             inputfile]
            
            retval = subprocess.call(ufraw_cmd, 0, None, None, None, None)
            developedfiles.append(outputfile)
            
            
        outputfile = self.get_output_filename("out", ".tiff")
            
        enfuse_cmd1 = ["enfuse", \
                           "-o", outputfile, \
                           "--wExposure", self.settings["wExposure"], \
                           "--wSaturation", self.settings["wSaturation"], \
                           "--wContrast", self.settings["wContrast"], \
                           "--wMu", self.settings["wMu"], \
                           "--wSigma", self.settings["wSigma"]]
        
        enfuse_cmd1.extend(developedfiles)
        
        retval = subprocess.call(enfuse_cmd1, 0, None, None, None, None)
        image.set_file("current", outputfile)    
            

class CACorrectOperation(ImageOperation):

    def __init__(self, settings):
        ImageOperation.__init__(self, settings)
        self.name = "Correct chromatic aberration"

    def operation(self, image):
        
        inputfile = image.get_file("current")
        
        tca_correct_cmd = ["tca_correct", \
                               "-o", "abcv", \
                               inputfile]
        
        tca_correct_proc = subprocess.Popen(tca_correct_cmd, stdout = subprocess.PIPE)
        tca_correct_result = tca_correct_proc.communicate()[0]
        ca_params = re.findall( "-r (.*) -b (.*)", tca_correct_result )
        
        outputfile = self.get_output_filename("", ".tiff")
        
        fulla_cmd = ["fulla", \
                         "-r", ca_params[0][0], \
                         "-b", ca_params[0][1], \
                         "-o", outputfile, \
                         inputfile]
    
        retval = subprocess.call(fulla_cmd, 0, None, None, None, None)
        image.set_file("current", outputfile)
        
    
class DevelopFromRawOperation(ImageOperation):

    def __init__(self, settings):
        ImageOperation.__init__(self, settings)
        self.name = "Develop from RAW file"

    def operation(self, image):
        
        inputfile = image.get_file("raw")
        outputfile = self.get_output_filename("", ".tiff")
        
        cmd = ["ufraw-batch", \
                   "--shrink", self.settings["shrink"], \
                   "--wb", self.settings["wb"], \
                   "--saturation", self.settings["saturation"], \
                   "--restore", self.settings["restore"], \
                   "--exposure", self.settings["exposure"], \
                   "--black-point", self.settings["black-point"], \
                   "--clip", self.settings["clip"], \
                   "--interpolation", self.settings["interpolation"], \
                   "--wavelet-denoising-threshold", self.settings["wavelet-denoising-threshold"], \
                   #"--overwrite", settings["overwrite"], \
                   "--out-type", self.settings["out-type"], \
                   "--output", outputfile, \
                   inputfile]

        # Call the subprocess using convenience method
        retval = subprocess.call(cmd, 0, None, None, None, None)
        
        image.set_file("current", outputfile)
        
        
def main():    

    enfuse_from_raw = EnfuseFromRawOperation({"enfuse_exposures": [ "-2", "-1", "0", "1", "2"]})
    enfuse_from_raw.children.append(BoostColorOperation({"a_boost": "1.5x60%", "b_boost" : "1.5x60%"}))
    enfuse_from_raw.children.append(BoostColorOperation({"a_boost": "1.5x40%", "b_boost" : "1.5x40%"}))
    enfuse_from_raw.children.append(BoostColorOperation({"a_boost": "1.5x60%", "b_boost" : "1.5x40%"}))
    enfuse_from_raw.children.append(BoostColorOperation({"a_boost": "1.5x40%", "b_boost" : "1.5x60%"}))

    image = Image()
    image.set_file("raw", "inputfile.cr2");

    enfuse_from_raw.perform_operation(image)

main()
