#!/usr/bin/env python

import os, subprocess

class ImageOperation:
    
    def __init__(self, name, operation, op_settings):
        self.name = name
        self.operation = operation
        self.op_settings = op_settings

    def get_settings_string():
        return ""

    def process_image(self, image):
        print "Performing operation", self.name
        self.operation(image, self.op_settings)
        #do the stuff

class PipelineOperation:

    def __init__(self, image_operation, children):
        self.image_operation = image_operation
        self.children = children

    def perform_operation(self, parent_operation, image):
        self.image_operation.process_image(image)
        for child in self.children: 
            child.perform_operation(self, image)

class Image: 

    #Contains one image file or files from different steps in the process?
    #Any intermediate file names could be stored in a map
    #All files could be removed in the end

    def get_file(name):
        print ""
        
    def set_file():
        print ""

#def develop_from_raw(image, settings):
#    print func_name

def correct_exposure(image, settings):
    print "foo"

def reduce_noise(image, settings):
    print func_name

def sharpen(image, settings):
    print func_name

def denoise(image, settings):
    print func_name

def ca_correct(image, settings):
    print func_name

def develop_from_raw(image, settings):

    inputfile = "inputfile.cr2"
    outputfile = "outputfile.tiff"
    
    cmd = ["ufraw-batch", \
          "--shrink", settings["shrink"], \
          "--wb", settings["wb"], \
          "--saturation", settings["saturation"], \
          "--restore", settings["restore"], \
          "--exposure", settings["exposure"], \
          "--black-point", settings["black-point"], \
          "--clip", settings["clip"], \
          "--interpolation", settings["interpolation"], \
          "--wavelet-denoising-threshold", settings["wavelet-denoising-threshold"], \
          #"--overwrite", settings["overwrite"], \
          "--out-type", settings["out-type"], \
          "--output", outputfile, \
          inputfile]

    # Create output log file
    outFile = os.path.join(os.curdir, "output.log")
    outptr = file(outFile, "w")
    
    # Create error log file
    errFile = os.path.join(os.curdir, "error.log")
    errptr = file(errFile, "w")

    # Call the subprocess using convenience method
    retval = subprocess.call(cmd, 0, None, None, outptr, errptr)
    
    # Close log handles
    errptr.close()
    outptr.close()
    
    # Check the process exit code
    if not retval == 0:
        errptr = file(errFile, "r")
        errData = errptr.read()
        errptr.close()
        raise Exception("Error executing command: " + repr(errData))
    

def main():    

    ufraw_settings = { "shrink": "2", \
        "wb": "camera", \
        "saturation": "1.0", \
        "restore": "lch", \
        "exposure": "0", \
        "black-point": "0", \
        "clip": "digital", \
        "interpolation": "ahd", \
        "wavelet-denoising-threshold": "200", \
        "out-type": "tiff16" \
        }

    sharpen_op = ImageOperation("Sharpen", correct_exposure, [])
    reduce_noise_op = ImageOperation("Reduce noise", correct_exposure, [])
    adjust_color_op = ImageOperation("Adjust color", correct_exposure, [])
    correct_exposure_op = ImageOperation("Correct exposure", correct_exposure, [])
    ca_correct_op = ImageOperation("Correct chromatic aberration", correct_exposure, [])
    correct_whitebalance_op = ImageOperation("Correct whitebalance", correct_exposure, [])
    develop_from_raw_op = ImageOperation("Develop from RAW", develop_from_raw, ufraw_settings)

    sharpen = PipelineOperation(sharpen_op, [])
    denoise = PipelineOperation(reduce_noise_op, [sharpen])
    adjust_color = PipelineOperation(adjust_color_op, [denoise])
    ca_correct = PipelineOperation(ca_correct_op, [adjust_color])
    adjust_exposure = PipelineOperation(correct_exposure_op, [ca_correct])
    whitebalance = PipelineOperation(correct_whitebalance_op, [adjust_exposure])
    develop_from_ra = PipelineOperation(develop_from_raw_op, [whitebalance])

    image = Image()

    develop_from_ra.perform_operation(develop_from_raw, image)

main()
