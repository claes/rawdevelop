#!/usr/bin/env python

import os, re, subprocess

class ImageOperation:
    
    def __init__(self, name, operation, op_settings):
        self.name = name
        self.operation = operation
        self.op_settings = op_settings

    def get_settings_string():
        return ""

    def process_image(self, image):
        print "Performing operation", self.name
        self.operation(image, self.op_settings)
        #do the stuff

class PipelineOperation:

    def __init__(self, image_operation, children):
        self.image_operation = image_operation
        self.children = children

    def perform_operation(self, parent_operation, image):
        self.image_operation.process_image(image)
        for child in self.children: 
            child.perform_operation(self, image)

class Image: 

    files = {}

    def get_file(self, name):
        return self.files[name]
        
    def set_file(self, name, file):
        self.files[name] = file

#def develop_from_raw(image, settings):
#    print func_name

def correct_exposure(image, settings):
    print

def reduce_noise(image, settings):
    print func_name

def sharpen(image, settings):
    print func_name

def denoise(image, settings):
    print func_name

def enfuse_from_raw(image, settings):
    inputfile = image.get_file("raw")
    
    exposure_list = ["-2", "0", "1"]
    developedfiles = []

    for exposure in exposure_list:

        outputfile = "enfused" + exposure + ".tiff"
        ufraw_cmd = ["ufraw-batch", \
                   "--shrink", settings["shrink"], \
                   "--wb", settings["wb"], \
                   "--saturation", settings["saturation"], \
                   "--restore", settings["restore"], \
                   "--exposure", settings["exposure"], \
                   "--black-point", settings["black-point"], \
                   "--clip", settings["clip"], \
                   "--interpolation", settings["interpolation"], \
                   "--wavelet-denoising-threshold", settings["wavelet-denoising-threshold"], \
                   #"--overwrite", settings["overwrite"], \
                   "--out-type", settings["out-type"], \
                   "--output", outputfile, \
                   inputfile]
        
        retval = subprocess.call(ufraw_cmd, 0, None, None, None, None)
        developedfiles.append(outputfile)
    
        
    outputfile = "enfused.tiff"
    
    enfuse_cmd1 = ["enfuse", \
                      "-o", outputfile, \
                      "--wExposure", settings["wExposure"], \
                      "--wSaturation", settings["wSaturation"], \
                      "--wContrast", settings["wContrast"], \
                      "--wMu", settings["wMu"], \
                      "--wSigma", settings["wSigma"]]

    enfuse_cmd1.extend(developedfiles)

    retval = subprocess.call(enfuse_cmd1, 0, None, None, None, None)
    image.set_file("current", outputfile)    
        

def ca_correct(image, settings):

    inputfile = image.get_file("current")

    outputfile = "tca_corrected.tiff"
    tca_correct_cmd = ["tca_correct", \
                           "-o", "abcv", \
                           inputfile]

    tca_correct_proc = subprocess.Popen(tca_correct_cmd, stdout = subprocess.PIPE)
    tca_correct_result = tca_correct_proc.communicate()[0]
    print "tca_correct_result", tca_correct_result
    ca_params = re.findall( "-r (.*) -b (.*)", tca_correct_result )

    outputfile = "ca_corrected.tiff"
    
    fulla_cmd = ["fulla", \
                     "-r", ca_params[0][0], \
                     "-b", ca_params[0][1], \
                     "-o", outputfile, \
                     inputfile]
    
    retval = subprocess.call(fulla_cmd, 0, None, None, None, None)
    image.set_file("current", outputfile)


def develop_from_raw(image, settings):

    inputfile = image.get_file("raw")
    outputfile = "outputfile.tiff"
    
    cmd = ["ufraw-batch", \
               "--shrink", settings["shrink"], \
               "--wb", settings["wb"], \
               "--saturation", settings["saturation"], \
               "--restore", settings["restore"], \
               "--exposure", settings["exposure"], \
               "--black-point", settings["black-point"], \
               "--clip", settings["clip"], \
               "--interpolation", settings["interpolation"], \
               "--wavelet-denoising-threshold", settings["wavelet-denoising-threshold"], \
               #"--overwrite", settings["overwrite"], \
               "--out-type", settings["out-type"], \
               "--output", outputfile, \
               inputfile]

    # Call the subprocess using convenience method
    retval = subprocess.call(cmd, 0, None, None, None, None)

    image.set_file("current", outputfile)
    

def main():    

    enfuse_settings = { \
        "wExposure": "1.0", \
        "wSaturation": "0.2", \
        "wContrast": "0", \
        "wMu": "0.5", \
        "wSigma": "0.2", \
        }

    ufraw_settings = { \
        "shrink": "2", \
        "wb": "camera", \
        "saturation": "1.0", \
        "restore": "lch", \
        "exposure": "0", \
        "black-point": "0", \
        "clip": "digital", \
        "interpolation": "ahd", \
        "wavelet-denoising-threshold": "200", \
        "out-type": "tiff16" \
        }


    settings = {}
    settings.update(enfuse_settings)
    settings.update(ufraw_settings)


    sharpen_op = ImageOperation("Sharpen", correct_exposure, [])
    reduce_noise_op = ImageOperation("Reduce noise", correct_exposure, [])
    adjust_color_op = ImageOperation("Adjust color", correct_exposure, [])
    correct_exposure_op = ImageOperation("Correct exposure", correct_exposure, [])
    ca_correct_op = ImageOperation("Correct chromatic aberration", ca_correct, [])
    correct_whitebalance_op = ImageOperation("Correct whitebalance", correct_exposure, [])
    enfuse_op = ImageOperation("Enfuse", enfuse_from_raw, settings)
    develop_from_raw_op = ImageOperation("Develop from RAW", develop_from_raw, settings)

    sharpen = PipelineOperation(sharpen_op, [])
    denoise = PipelineOperation(reduce_noise_op, [sharpen])
    adjust_color = PipelineOperation(adjust_color_op, [denoise])
    ca_correc = PipelineOperation(ca_correct_op, [adjust_color])
    adjust_exposure = PipelineOperation(correct_exposure_op, [ca_correc])
    whitebalance = PipelineOperation(correct_whitebalance_op, [adjust_exposure])
    enfus = PipelineOperation(enfuse_op, [adjust_exposure])
    develop_from_ra = PipelineOperation(develop_from_raw_op, [enfus])

    image = Image()
    image.set_file("raw", "inputfile.cr2");

    develop_from_ra.perform_operation(develop_from_raw, image)

main()
